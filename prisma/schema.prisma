// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Next-auth related models remain the same
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String
  role          ApprovalLevel @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  employee      Employee?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
}

// Leave Management System models
model Employee {
  id          String    @id @default(cuid())
  empId       String    @unique
  firstName   String
  lastName    String
  email       String    @unique
  department  String
  position    String
  joiningDate DateTime  @default(now())
  isActive    Boolean   @default(true)
  isManager   Boolean   @default(false)
  isHR        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  user User @relation(fields: [empId], references: [id], onDelete: Cascade)

  leaveBalances LeaveBalance[]
  leaveRequests LeaveRequest[]
  approvals     LeaveApproval[]

  // New fields for many-to-one approver relationship
  approverId   String?
  approver     Employee?  @relation("EmployeeApprover", fields: [approverId], references: [id])
  subordinates Employee[] @relation("EmployeeApprover")

  approvalLevel ApprovalLevel @default(SUPERVISOR)
}

model LeaveType {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String?
  annualAllowance    Float
  requiresApproval   Boolean  @default(true)
  isPaid             Boolean  @default(true)
  minNoticeDays      Int      @default(0)
  maxConsecutiveDays Int?
  allowsHalfDay      Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  leaveBalances LeaveBalance[]
  leaveRequests LeaveRequest[]
}

model LeaveBalance {
  id          String   @id @default(cuid())
  employeeId  String
  leaveTypeId String
  year        Int
  balance     Float    @default(0)
  used        Float    @default(0)
  pending     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee  Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leaveType LeaveType @relation(fields: [leaveTypeId], references: [id])

  @@unique([employeeId, leaveTypeId, year])
}

model LeaveRequest {
  id                 String       @id @default(cuid())
  employeeId         String
  leaveTypeId        String
  startDate          DateTime     @db.Date
  endDate            DateTime     @db.Date
  leaveDay           LeaveDay     @default(FULL)
  daysRequested      Float
  status             LeaveStatus  @default(PENDING)
  pmdStatus          LeaveStatus? @default(PENDING)
  reason             String
  rejectionReason    String?
  pmdRejectionReason String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  employee  Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leaveType LeaveType       @relation(fields: [leaveTypeId], references: [id])
  approvals LeaveApproval[]

  @@index([status])
}

model LeaveApproval {
  id             String         @id @default(cuid())
  leaveRequestId String
  approverId     String
  level          ApprovalLevel
  status         ApprovalStatus @default(PENDING)
  comment        String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  leaveRequest LeaveRequest @relation(fields: [leaveRequestId], references: [id], onDelete: Cascade)
  approver     Employee     @relation(fields: [approverId], references: [id])

  @@unique([leaveRequestId, level])
}

enum LeaveDay {
  FULL
  FIRST_HALF
  SECOND_HALF
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ApprovalLevel {
  SUPERVISOR
  HR
  USER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
