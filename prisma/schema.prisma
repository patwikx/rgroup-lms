datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String        @id @default(cuid())
  employeeId         String?       @unique
  email              String        @unique
  password           String
  firstName          String
  lastName           String
  image              String?
  emailVerified      DateTime?
  contactNo          String?
  address            String?
  emergencyContactNo String?
  department         String?
  position           String?
  joiningDate        DateTime      @default(now())
  isActive           Boolean       @default(true)
  isManager          Boolean       @default(false)
  isHR               Boolean       @default(false)
  isTWC              Boolean       @default(false)
  role               ApprovalLevel @default(USER)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime?     @updatedAt

  accounts          Account[]
  sessions          Session[]
  leaveBalances     LeaveBalance[]
  leaveRequests     LeaveRequest[]
  approvals         LeaveApproval[]
  overtimes         Overtime[]
  overtimeApprovals OvertimeApproval[]

  // Approver relationship
  approverId   String?
  approver     User?   @relation("UserApprover", fields: [approverId], references: [id])
  subordinates User[]  @relation("UserApprover")
}

model LeaveType {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String?
  annualAllowance    Float
  requiresApproval   Boolean  @default(true)
  isPaid             Boolean  @default(true)
  minNoticeDays      Int      @default(0)
  maxConsecutiveDays Int?
  allowsHalfDay      Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  leaveBalances LeaveBalance[]
  leaveRequests LeaveRequest[]
}

model LeaveBalance {
  id          String   @id @default(cuid())
  userId      String
  leaveTypeId String
  year        Int
  balance     Float    @default(0)
  used        Float    @default(0)
  pending     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType LeaveType @relation(fields: [leaveTypeId], references: [id])

  @@unique([userId, leaveTypeId, year])
}

model LeaveRequest {
  id                 String       @id @default(cuid())
  userId             String
  leaveTypeId        String
  startDate          DateTime     @db.Date
  endDate            DateTime     @db.Date
  leaveDay           LeaveDay     @default(FULL)
  daysRequested      Float
  status             LeaveStatus  @default(PENDING)
  pmdStatus          LeaveStatus? @default(PENDING)
  reason             String
  rejectionReason    String?
  pmdRejectionReason String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType LeaveType       @relation(fields: [leaveTypeId], references: [id])
  approvals LeaveApproval[]

  @@index([status])
}

model LeaveApproval {
  id             String         @id @default(cuid())
  leaveRequestId String
  approverId     String
  level          ApprovalLevel
  status         ApprovalStatus @default(PENDING)
  comment        String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  leaveRequest LeaveRequest @relation(fields: [leaveRequestId], references: [id], onDelete: Cascade)
  approver     User         @relation(fields: [approverId], references: [id])

  @@unique([leaveRequestId, level])
}

model Overtime {
  id              String         @id @default(cuid())
  userId          String
  date            DateTime       @db.Date
  startTime       DateTime
  endTime         DateTime
  totalHours      Float
  reason          String
  status          OvertimeStatus @default(PENDING)
  rejectionReason String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvals OvertimeApproval[]

  @@index([status])
}

model OvertimeApproval {
  id         String         @id @default(cuid())
  overtimeId String
  approverId String
  level      ApprovalLevel
  status     ApprovalStatus @default(PENDING)
  comment    String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  overtime Overtime @relation(fields: [overtimeId], references: [id], onDelete: Cascade)
  approver User     @relation(fields: [approverId], references: [id])

  @@unique([overtimeId, level])
}

enum LeaveDay {
  FULL
  FIRST_HALF
  SECOND_HALF
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ApprovalLevel {
  SUPERVISOR
  HR
  USER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OvertimeStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
